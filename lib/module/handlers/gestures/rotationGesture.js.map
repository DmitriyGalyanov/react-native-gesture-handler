{"version":3,"sources":["rotationGesture.ts"],"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","rotationChange","rotation","RotationGesture","constructor","handlerName","secondPointerLiftFinishesGesture","value","config","onChange","callback","handlers"],"mappings":";;AAAA,SAASA,oBAAT,QAAwD,WAAxD;;AASA,SAASC,qBAAT,CACEC,OADF,EAEEC,QAFF,EAGE;AACA;;AACA,MAAIC,aAAJ;;AACA,MAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAC1BD,IAAAA,aAAa,GAAG;AACdE,MAAAA,cAAc,EAAEJ,OAAO,CAACK;AADV,KAAhB;AAGD,GAJD,MAIO;AACLH,IAAAA,aAAa,GAAG;AACdE,MAAAA,cAAc,EAAEJ,OAAO,CAACK,QAAR,GAAmBJ,QAAQ,CAACI;AAD9B,KAAhB;AAGD;;AAED,SAAO,EAAE,GAAGL,OAAL;AAAc,OAAGE;AAAjB,GAAP;AACD;;AAED,OAAO,MAAMI,eAAN,SAA8BR,oBAA9B,CAGL;AAGAS,EAAAA,WAAW,GAAG;AACZ;;AADY,oCAF6C,EAE7C;;AAGZ,SAAKC,WAAL,GAAmB,wBAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,gCAAgC,CAACC,KAAD,EAAiB;AAC/C,SAAKC,MAAL,CAAYF,gCAAZ,GAA+CC,KAA/C;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,QAAQ,CACNC,QADM,EAMN;AACA;AACA,SAAKC,QAAL,CAAcf,qBAAd,GAAsCA,qBAAtC;AACA,WAAO,MAAMa,QAAN,CAAeC,QAAf,CAAP;AACD;;AAhCD","sourcesContent":["import { ContinousBaseGesture, BaseGestureConfig } from './gesture';\nimport type { RotationGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport type { RotationGestureConfig } from '../RotationGestureHandler';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & RotationGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  /**\n   * @Platform Android\n   * When `false`, the Handler will not finish when second Pointer Lifts,\n   * allowing Gesture to continue when a new second Pointer arrives\n   * (on iOS it's the default Behaviour)\n   *\n   * @param {boolean} value\n   */\n  secondPointerLiftFinishesGesture(value: boolean) {\n    this.config.secondPointerLiftFinishesGesture = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"]}